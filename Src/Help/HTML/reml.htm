<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at https://mozilla.org/MPL/2.0/
 *
 * Copyright (C) 2009-2020, Peter Johnson (gravatar.com/delphidabbler).
 *
 * Help topic describing REML markup language.
-->
<html>
  <head>
    <meta http-equiv="Content-Type" content="text-html; charset=Windows-1252">
    <title>
      About REML
    </title>
    <link rel="stylesheet" href="../css/codesnip.css" type="text/css">
    <style type="text/css">
      dl {
        margin: 6px 0 0 0;
      }
      dl dt {
        margin: 3px 0 0 0;
      }
      dl dd {
        margin-left: 24px;
      }
      .hilite {
        background-color: #ff9;
      }
    </style>
  </head>
  <body>
    <object
     type="application/x-oleobject"
     classid="clsid:1e2a7bd0-dab9-11d0-b93a-00c04fc99f9e"
    >
      <param name="ALink Name" value="REML">
    </object>
    <h1>
      <a name="reml"></a>About the REML markup language
    </h1>
    <p>
      <em>REML</em> is <em>CodeSnip</em>'s own little markup language that can
      be used to style the text of a snippet's description and / or extra
      information.
    </p>
    <h2>
      Language Details
    </h2>
    <p>
      The <em>REML</em> language is a SGML language similar to a greatly
      simplified XHTML. The are a small number of tags you can use. Firstly
      there are two block-level tags that render text in paragraphs, while the
      other tags format text inline or embed hyplerlinks.
    </p>
    <h3>
      Block level tags
    </h3>
    <dl>
      <dt><code class="reml">&lt;p&gt;...&lt/p&gt;</code></dt>
      <dd>
        Renders the enclosed markup as a simple paragraph.
      </dd>
      <dt><code class="reml">&lt;heading&gt;...&lt;/heading&gt;</code></dt>
      <dd>
        Renders the enclosed markup as a heading.
      </dd>
    </dl>
    <p>
      The following rules apply to the use of
      <code class="reml">&lt;p&gt;</code> and
      <code class="reml">&lt;heading&gt;</code>
    </p>
    <ol>
      <li>
        The tags must not be nested.
      </li>
      <li>
        The tags must be matched, e.g.
        <code class="reml">&lt;p&gt;</code> must have a matching
        <code class="reml">&lt;/p&gt;</code>.
      </li>
      <li>
        All text should be embedded within block level tags, e.g. <span
          class="code"
        >&lt;heading&gt;heading&lt;/heading&gt; &lt;p&gt;text&lt;/p&gt;</span>
        or simply <span
          class="code"
        >&lt;p&gt;text&lt;/p&gt;</span>.
      </li>
    </ol>
    <p>
      Here are some valid examples:
    </p>
    <ol>
      <li class="extra-spacing">
        <code class="reml">&lt;p&gt;Hello World&lt;/p&gt;</code>
      </li>
      <li>
        <code class="reml">&lt;heading&gt;Hello&lt;/heading&gt;<br>
        &lt;p&gt;Hello World&lt;/p&gt;</code>
      </li>
    </ol>
    <p>
      Srictly speaking, the following example is invalid code &ndash; the
      highlighted sections are in error, because they are not contained within
      block tags.
    </p>
    <pre class="reml indent"><span class="hilite">blah</span>&lt;heading&gt;blah&lt;/heading&gt;<span class="hilite">blah</span>&lt;p&gt;blah&lt;/p&gt;<span class="hilite">blah</span></pre>
    <p>
      However, <em>CodeSnip</em> is quite permissive and, in many cases,
      automatically adds
      <code class="reml">&lt;p&gt;</code>...<code class="reml">&lt;/p&gt;</code>
      tags for text that is not enclosed in block level tags. The above code is
      interpreted as:
    </p>
    <pre class="reml indent">&lt;p&gt;<span class="hilite">blah</span> &lt;/p&gt;
&lt;heading&gt;blah&lt;/heading&gt;
&lt;p&gt;<span class="hilite">blah</span> &lt;/p&gt;
&lt;p&gt;blah&lt;/p&gt;
&lt;p&gt;<span class="hilite">blah</span>&lt;/p&gt;</pre>
    <h3>
      Inline tags
    </h3>
    <p>
      Here are the available inline tags:
    </p>
    <dl>
      <dt><code class="reml">&lt;strong&gt;...&lt/strong&gt;</code></dt>
      <dd>
        Renders the enclosed markup with strong emphasis.<br>
        <em>Example:</em> <code class="reml">&lt;p&gt;Make stuff
        &lt;strong&gt;stand out&lt;/strong&gt;.&lt;/p&gt;</code>
      </dd>
      <dt><code class="reml">&lt;em&gt;...&lt;/em&gt;</code></dt>
      <dd>
        Emphasises the enclosed markup.<br>
        <em>Example:</em> <code class="reml">&lt;p&gt;Draw
        &lt;em&gt;attention&lt;/em&gt; to something.&lt;/p&gt;</code>
      </dd>
      <dt><code class="reml">&lt;var&gt;...&lt;/var&gt;</code></dt>
      <dd>
        Used to indicate the enclosed markup is a variable.<br>
        <em>Example:</em> <code class="reml">&lt;p&gt;Refer to a function
        &lt;var&gt;parameter&lt;/var&gt;.&lt;/p&gt;</code>
      </dd>
      <dt><code class="reml">&lt;warning&gt;...&lt;/warning&gt;</code></dt>
      <dd>
        Used for warning text.<br>
        <em>Example:</em>
        <code class="reml">&lt;p&gt;&lt;warning&gt;Warning:&lt;/warning&gt;
        Don't do it!&lt;/p&gt;</code>
      </dd>
      <dt><code class="reml">&lt;mono&gt;...&lt;/mono&gt;</code></dt>
      <dd>
        Renders markup in a mono-spaced font.<br>
        <em>Example:</em> <code class="reml">&lt;p&gt;Use the:
        &lt;mono&gt;Windows&lt;/mono&gt; unit.&lt;/p&gt;</code>
      </dd>
      <dt><code class="reml">&lt;a href=&quot;url&quot;&gt;...&lt;/a&gt;</code></dt>
      <dd>
        Creates a hyperlink. The <code class="reml">href</code> attribute must
        specify the required URL, which must use one of the <em>http:</em>,
        <em>https:</em> or <em>file:</em> protocols; others are not permitted.
        If you use the <em>file:</em> protocol it must reference a valid local
        or network file. Be aware that if you export a snippet
        containing a hyperlink that uses the <em>file:</em> protocol it will
        only work on the recipient's system if the specified file exists in the
        same location.<br>
        <em>Example:</em> <code class="reml">&lt;p&gt;&lt;a
        href=&quot;https://example.com&quot;&gt;Visit
        example.com&lt;/a&gt;&lt/p&gt;.</code>.
      </dd>
    </dl>
    <h3 id="entities">
      Character Entities
    </h3>
    <p>
      The &quot;&lt;&quot; and &quot;&amp;&quot; characters are special within
      the markup and must not be used directly, even when you are just entering
      plain text. You must use the <code class="reml">&amp;lt;</code> character
      entity in place of &quot;&lt;&quot; and
      <code class="reml">&amp;amp;</code> instead of &quot;&amp;&quot;.
    </p>
    <p>
      A few other character entities are supported for convenience. Here is the
      complete list:
    </p>
    <ul class="unspaced">
      <li>
        <code class="reml">&amp;lt;</code> for <code class="reml">&lt;</code>
      </li>
      <li>
        <code class="reml">&amp;gt;</code> for <code class="reml">&gt;</code>
      </li>
      <li>
        <code class="reml">&amp;quot;</code> for
        <code class="reml">&quot;</code>
      </li>
      <li>
        <code class="reml">&amp;amp;</code> for <code class="reml">&amp;</code>
      </li>
      <li>
        <code class="reml">&amp;copy;</code> for
        <code class="reml">&copy;</code>
      </li>
    </ul>
    <p>
      By way of an example, if you want to display <code>x &lt; y</code>, use:
    </p>
    <p class="indent">
      <code class="reml">x &amp;lt; y</code>
    </p>
    <p>
      No other symbolic character entities are supported.
      However, numeric character entities can be used to insert other characters
      by specifying its code. For example <code class="reml">&amp;#64;</code> is
      equivalent to &quot;&#64;&quot;.
    </p>
    <p>
      Numeric entities should be used with caution. Using a code that is
      specific to an ANSI character set may cause unexpected results because
      <em>CodeSnip</em> uses Unicode internally and the specified character code
      may not represent the same character in ANSI and Unicode.
    </p>
  </body>
</html>

